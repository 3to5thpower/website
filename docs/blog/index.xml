<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on 3^5の備忘録</title>
    <link>https://sagojo.dev/blog/</link>
    <description>Recent content in Blog on 3^5の備忘録</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 13 Aug 2020 19:30:00 +0900</lastBuildDate>
    
	<atom:link href="https://sagojo.dev/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>提督列車in松浦鉄道レポート</title>
      <link>https://sagojo.dev/blog/teitoku_train/</link>
      <pubDate>Thu, 13 Aug 2020 19:30:00 +0900</pubDate>
      
      <guid>https://sagojo.dev/blog/teitoku_train/</guid>
      <description>こんにちは。さごじょーです。
7月24日〜26日にかけて佐世保遠征に行ってきまして、
提督列車in松浦鉄道なるイベントに参加しましたので、
そのレポートとして旅程を書き残そうと思います。
もう3週間近く経つんですね…。外出できないと時間が経つのが早く感じます。
このブログ自体これを書くために立てた説まであるので、ようやく書けるといった感じです。
これは書く前から分かるんですけど結構細かく書くつもりなのでそこそこ長くなると思います。
一日ずつ分けようとも思ったのですが、まあまとまってたほうが自分が後から参照しやすいのでいいかな…となりました。許してください。
7/24日(金) 昼過ぎの特急みどり号で夕方に佐世保に到着しました。
昨年9月の佐世保鎮守府開庁130周年記念イベント 130th SASEBO 2019と
今年3月の西海ノ暁のときに訪れたので、
佐世保の地に立つのは3回目になります。
(ハウステンボスとかを含めると倍くらいに増えそうですが…。)
   BigMan 着いて最初に行ったのはBigManさんです。
 佐世保についたらとりあえず佐世保バーガー食べるか！ｗって感じでふらっと行きました。
食べたのはベーコンレタスバーガーです。
(なんとなくいつもベーコンレタスバーガー頼んでしまう…)
  やっぱり何回食べても佐世保バーガーはおいしいですね。
歯ごたえのあるレタスと丁寧な味付けがされたハンバーグが、
「ハンバーガーもちゃんとした料理だよなぁ」と感じさせてくれます。
正統派でおいしいハンバーガーだと思います。
 佐世保港 その後は、佐世保公園でのバーベキューに参加されていた提督と合流してラクルーズに…
の前に、佐世保港に立ち寄って夜の海を見に行きました。
  風が強かったのと、スマホのカメラではまともに撮れなかったので写真はこれだけです。
リアイベ行ってるとちゃんとしたカメラ欲しくなりますよねぇ…。
ちなみに、一緒に来ていた提督方は時雨のミニ祭壇を立てて強風の中必死に撮影をしておりました…ｗ
(嫁艦のねんどろいどが出てる方々がうらやましい…)
pic.twitter.com/4y95UDruoF
&amp;mdash; 穢波 (@HB_8615) July 24, 2020   ラ・クルーズ 佐世保港を出て、ようやく佐世保バー ラ・クルーズさんに到着しました！
艦娘イメージのカクテルを作ってくれることでリアイベ提督御用達のバーになっています！
    やはりイベント前は結構人が集まるようで、マスターも忙しそうでした…。
奥のテーブルだったのですがテーブル単位で同じカクテルを注文するような形式になっていました。
提督同士で話し合ってカクテル(というか艦娘)を決めるので、これはこれで楽しかったですねｗ
この日飲んだのは4杯で、最初はとりあえず佐世保の時雨、続いてソロモンのイベント中ということで夕立、そして雪風、Jervisをいただきました。写真は時雨のイメージカクテルです。(あまりにみんな時雨を頼むのでラクルーズに来た人の何割が最初の一杯目で時雨を頼むのかちょっと気になりますね…)   この日は同じテーブル内でイベント攻略中・新規実装艦を求めて周回している方が多く、
ゲン担ぎに幸運艦モチーフのカクテルが多く注文されていましたｗ
その効果もあってか、はたまたラクルーズの力か、
Bismarckの一発建造に成功した提督や、迅鯨がドロップした提督もいました。
ラクルーズがパワースポットであるかのように語られるのも納得ですね‥！</description>
    </item>
    
    <item>
      <title>ファンコミュニケーションズ オンラインインターン参加記</title>
      <link>https://sagojo.dev/blog/intern_fancom20/</link>
      <pubDate>Tue, 11 Aug 2020 18:00:00 +0900</pubDate>
      
      <guid>https://sagojo.dev/blog/intern_fancom20/</guid>
      <description>株式会社ファンコミュニケーションズさんで
8月3日から7日までの5日間オンラインインターンをさせていただいたので、
参加記をまとめたいと思います。
参加の経緯 サポーターズさんの22卒対象エンジニア1on1面談イベントで、
趣味でRustでCコンパイラを作っているという話をしたところ、
インターンにRustの枠を新しく設けて参加させていただけるというお誘いをいただき、
参加する運びとなりました。
やー本当に、ありがたいお話です…！
選考は一応エントリーシートの提出, 面接, 技術テストと、
恐らく普通のインターンと同じような段取りで行われていたと思います。
(今回が初めてなので確証はないですが…)
こんな感じで選考を終え、インターン初日を迎えました。
成果物 その前に作ったものを説明します。 DSPと呼ばれるWeb広告の配信仲介サーバです。
スマホなどでポップアップで広告を表示するアプリは、SSPと呼ばれるサーバに表示する広告をリクエストします。
SSPはそれを受けて複数のDSPに広告をリクエストします。
それぞれのDSPから渡された広告の中で最も入札金額が高いものがSSPの返却する広告として選ばれるっぽいです。
DSPの話に戻りますが、SSPに広告を選ばせるために、
DSPはSSPからリクエストされると持っている広告データの中から適切な広告を1つ選んで返却します。
広告データには入札金額などは定められていないので、DSPの中でいい感じに決定します。 (ここで機械学習などが使われます。)
  DSPがやることをまとめると、
 SSPからのリクエストを受け取る データベースから入っている広告データをn個取ってくる n個の広告のうち、リクエストしてきたアプリケーションをブロック対象としている広告を除外する
(競合アプリに広告出したりはしないですよね、多分) 除外後の広告達を機械学習APIに投げ、それぞれの入札金額を決定してもらう SSPのリクエストで指定されていた最低入札金額よりも低い金額の広告を除外 残った広告の中で最も高い入札金額の広告をSSPに返却する  このような流れになります。
その他DSPが行う作業として、
 アプリケーションから表示完了の通知を受け取る アプリケーションから広告をクリックしたという通知を受け取る 全てのリクエスト・レスポンスのログを出力する  などが今回要求されました。
私が今回製作したmini-dspはプログラム部分は全てRustを使って実装しており、
シンプルな設計と速度が特徴となっています。
1日目 10時にメンターの方と顔合わせのミーティングを行い、
そのまま課題についての説明をしていただきました。
先ほどのDSPとSSPなどの仕組みの話は全く知らなかったので、この説明がなければ死んでいたと思います。
感謝ですね…！
課題説明が40〜50分くらいで終わったので、
その後に実装の簡単な段取りを考えました。
 リクエストを受け取って適当なレスポンスを返すサーバ部分を書く 機械学習APIのモックを作る ログ機能を実装する イベント通知を受け取る機能を書く DBから広告を取得する部分を書く  大体これを一日1つ〜2つ実装していけば終わりそうかな、という見積もりでした。
ここまでが午前中の話で、午後からは実装に入りました。
1日目の実装はサーバと機械学習APIのモックの作成でした。
サーバはRustの軽量・高速なWebフレームワークであるactix-webを使いました。   初めて使う上に、アップデートが激しいため見つかる参考資料も古いものが多くそこそこ苦労しましたが、とりあえず動く状態まで実装することができました。
17時を目処にプルリクを投げ、ミーティングでコードレビューをしていただきました。
2日目 2日目は特にミーティングを行うこともなく朝から実装に入りました。</description>
    </item>
    
    <item>
      <title>ブログ立てました</title>
      <link>https://sagojo.dev/blog/first/</link>
      <pubDate>Sun, 09 Aug 2020 00:17:04 +0900</pubDate>
      
      <guid>https://sagojo.dev/blog/first/</guid>
      <description>初めまして。3^5です。
今回初めてブログを立てたので 作業の詳細について書いていこうと思います。
使ったのはGoで書かれた静的サイトジェネレータHugoです。  個人的にRustが好きなので Rust製の静的サイトジェネレータのZolaを使おうとも考えたのですが、
使っている人口的に資料やテーマの数が少なかったためHugoを選びました。
実際ツール使うだけなので書かれてる言語は速度面以外だとほとんど関係ないですね。
テーマはとりあえずhugo-future-imperfect-slimを使っています。
ブログを立てるまでに行った作業はこんな感じです。
 Hugoのインストール リポジトリの初期化 ドメインを取る GitHub Pagesの設定 記事を書く  それぞれの詳細を解説していきます。
1.Hugoのインストール 僕は普段使っている環境がArch Linuxなのでそのままパッケージマネージャで導入しました。
yay -S hugo Ubuntuなんかでもaptに入ってるっぽいので多分大丈夫だと思います。
2.リポジトリの初期化 新しいサイトの生成は次のコマンドで行います。
hugo new site mysite mysiteのところは好きな名前にしてください。
次に、テーマの追加をします。
https://themes.gohugo.io/で好きなテーマを選び、
先ほど初期化したディレクトリ(ここではmysite)の中のthemes/に引っ張ってきます。
mkdir themes cd themes git submodule add https://github.com/pacollins/hugo-future-imperfect-slim.git ここからは選んだテーマによって作業が大きく異なりそうですが、
僕はダウンロードしてきたテーマのexampleSiteを書き換えながら作業を始めようと思い、
まずこれを作業ディレクトリのルートに展開しました。
cp -r themes/hugo-future-imperfect-slim/exampleSite/* ./ cpで変なファイル消されると怖いので、
-iコマンドを付けてファイルを上書きするときに確認させてもいいと思います。
これでhugo server -Dを実行するとサンプルサイトがlocalhostで立ち上がります。
contents以下が記事なので好きなように作り換えていきましょう。
新しい記事はhugo new blog/first.mdとかやると生成できます。
僕が採用したテーマは多言語対応だったので日本語を選択しそれ以外を消したのですが、
日本語も微妙だったので書き換えました。
(Aboutが約とかになっている時点でまあそうですよねーとなりました)
Hugoはユーザが書いた設定を優先して見に行くので
themes/hugo-future-imperfect-slim/layout/i18n/ja.tomlを
/i18n/ja.tomlにコピーしていろいろ書き換えています。
3.ドメインを取る 好きに取ってください。 僕はGoogle Domainsで取りました。</description>
    </item>
    
  </channel>
</rss>