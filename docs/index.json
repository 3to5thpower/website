[{
    "title": "ファンコミュニケーションズ オンラインインターン参加記",
    "date": "",
    "description": "",
    "body": "株式会社ファンコミュニケーションズさんで\n8月3日から7日までの5日間オンラインインターンをさせていただいたので、\n参加記をまとめたいと思います。\n参加の経緯 サポーターズさんの22卒対象エンジニア1on1面談イベントで、\n趣味でRustでCコンパイラを作っているという話をしたところ、\nインターンにRustの枠を新しく設けて参加させていただけるというお誘いをいただき、\n参加する運びとなりました。\nやー本当に、ありがたいお話です…！\n選考は一応エントリーシートの提出, 面接, 技術テストと、\n恐らく普通のインターンと同じような段取りで行われていたと思います。\n(今回が初めてなので確証はないですが…)\nこんな感じで選考を終え、インターン初日を迎えました。\n成果物 その前に作ったものを説明します。 DSPと呼ばれるWeb広告の配信仲介サーバです。\nスマホなどでポップアップで広告を表示するアプリは、SSPと呼ばれるサーバに表示する広告をリクエストします。\nSSPはそれを受けて複数のDSPに広告をリクエストします。\nそれぞれのDSPから渡された広告の中で最も入札金額が高いものがSSPの返却する広告として選ばれるっぽいです。\nDSPの話に戻りますが、SSPに広告を選ばせるために、\nDSPはSSPからリクエストされると持っている広告データの中から適切な広告を1つ選んで返却します。\n広告データには入札金額などは定められていないので、DSPの中でいい感じに決定します。 (ここで機械学習などが使われます。)\n  DSPがやることをまとめると、\n SSPからのリクエストを受け取る データベースから入っている広告データをn個取ってくる n個の広告のうち、リクエストしてきたアプリケーションをブロック対象としている広告を除外する\n(競合アプリに広告出したりはしないですよね、多分) 除外後の広告達を機械学習APIに投げ、それぞれの入札金額を決定してもらう SSPのリクエストで指定されていた最低入札金額よりも低い金額の広告を除外 残った広告の中で最も高い入札金額の広告をSSPに返却する  このような流れになります。\nその他DSPが行う作業として、\n アプリケーションから表示完了の通知を受け取る アプリケーションから広告をクリックしたという通知を受け取る 全てのリクエスト・レスポンスのログを出力する  などが今回要求されました。\n私が今回製作したmini-dspはプログラム部分は全てRustを使って実装しており、\nシンプルな設計と速度が特徴となっています。\n1日目 10時にメンターの方と顔合わせのミーティングを行い、\nそのまま課題についての説明をしていただきました。\n先ほどのDSPとSSPなどの仕組みの話は全く知らなかったので、この説明がなければ死んでいたと思います。\n感謝ですね…！\n課題説明が40〜50分くらいで終わったので、\nその後に実装の簡単な段取りを考えました。\n リクエストを受け取って適当なレスポンスを返すサーバ部分を書く 機械学習APIのモックを作る ログ機能を実装する イベント通知を受け取る機能を書く DBから広告を取得する部分を書く  大体これを一日1つ〜2つ実装していけば終わりそうかな、という見積もりでした。\nここまでが午前中の話で、午後からは実装に入りました。\n1日目の実装はサーバと機械学習APIのモックの作成でした。\nサーバはRustの軽量・高速なWebフレームワークであるactix-webを使いました。   初めて使う上に、アップデートが激しいため見つかる参考資料も古いものが多くそこそこ苦労しましたが、とりあえず動く状態まで実装することができました。\n17時を目処にプルリクを投げ、ミーティングでコードレビューをしていただきました。\n2日目 2日目は特にミーティングを行うこともなく朝から実装に入りました。\nこの日の実装は主にログ出力機能とイベント通知受け取り部分でした。\nログ書き出し用の構造体を作るときに上手いことトレイトを利用して簡潔に実装することができて、\n自分的には結構いい感じで書けたのでは、と思います。\nログに出力する可能性のある構造体はToLogトレイトを実装するだけでログを吐き出す関数の引数に渡すことができるようになるような設計にしていて、このあとイベント通知受け取り部分を実装したときもログ部分をほとんど書き換えずにすみました。\nイベント通知受け取り部分に関しては、ログを吐くための構造体を書いた後、1日目に作ったサーバ部分のコードに少し書き足すだけで終わりました。\n3~4日目 この2日間でDB接続部分を実装しました。\nDBにPostgreSQLとRustのORMにdieselを利用しています。\n当然これも初めて(というかDB使ったことなかった)なので、\n悪戦苦闘しながら動かしていました。\n幸い手元に実践Rust入門(自転車本)があり、この本の11章にDBと連携してアプリケーションを作る内容が載っていたのでめちゃめちゃに参考にしながら書いていきました。\n折角なのでDockerの知識をつけようと思いDocker環境で動くようにdocker-composeを書いていましたが、なかなかに分からず、丸2日溶かしてしまいました。\nまあ沼るのは割と分かっていたので先に書けるところを書いていてよかったなぁ、という感想でした。\n計画勝ちみたいなものですね。\n最終日 最終日は座談会と資料作成、発表を行いました。\n座談会ではZoomでファンコミュニケーションズさんに関する様々な質問をしたり、\n技術系の雑談に近い話をしたりしていました。\nどこの技術系イベントに行っても思うんですけど、やっぱり実際にエンジニアをやっていらっしゃる方々の話は本当に面白いので、いつも聞き入ってしまう感があります。\n座談会はとても楽しい時間でした。\nそれが終わるとプレゼン発表用の資料の作成を行いました。\nそこそこ気合を入れて作ったので2〜3時間くらいかかったと思います。\n作り終わるとメンターの方々にレビューをしていただき、そこからさらに資料を改良しました。\nプレゼンでの成果発表はオンラインで行いました。\n僕はサークルで結構オンラインでLTなどを行っていたので\n割とオンライン発表に慣れていたので、そこまで緊張はしませんでしたが、\n慣れてなかったら辛かっただろうなと思います。\nオンラインでプレゼンするの、反応が返ってこないので最初かなりやりにくいですよね。\n実演も事前に撮った動画を使ってグダらないよう気をつけました。\n  インターンの感想 感想ですが、まず普段趣味で書いてるのが活きた場面が結構あって、驚きました。\n2日目のようにトレイトを使って上手いこと抽象化したり、\n競技プログラミングでやってる感じで計算量をそれほど大きくせずにより簡潔に書いたりなど、普段やっていることが実際に動くものを作るときにもそのまま役立ったのはとても嬉しかったです。\n次に、初めて使う技術が多かったが思ったより苦労せず使えた、というのがあります。\nいやまあ苦労したのは苦労したのですが、それでも最終的に動く状態までたどり着けて、\n何も分からないみたいな状態でもそれなりに動かすことができるものなのだなぁと感じました。それとドキュメントの読み方の感覚とかも結構分かってきた感があります。\nこのあたりは普段の趣味プログラミングでは僕はあまりやらない範囲なので貴重な経験ができたと思います。\n後は、好きな言語で実際に業務っぽい動くプログラムが書けたのが良かったと思います。\n結局最終的にはコード書いてれば楽しいタイプの人間なので、Rustで書かせてくれるのが本当に楽しかったです。\n最後に 5日間という本当に短い期間でしたが、\nすごく楽しい時間となりました。\nオンラインインターンなので細かい質問の投げにくさであったり、\n実際の社内の雰囲気を感じ取ることが難しいという面もありますが、\nそれでもメンターの方々や人事の方がとてもよくサポートしてくれて、\nこれはこれでいい経験になったのではないかな、と考えています。\n(これからもオンラインのインターンや仕事は増えそうですし。)\n機会があればぜひまた参加したいと思えるインターンでした。\n本当にありがとうございました！\n",
    "ref": "/blog/intern_fancom20/"
  },{
    "title": "ブログ立てました",
    "date": "",
    "description": "",
    "body": "初めまして。3^5です。\n今回初めてブログを立てたので 作業の詳細について書いていこうと思います。\n使ったのはGoで書かれた静的サイトジェネレータHugoです。  個人的にRustが好きなので Rust製の静的サイトジェネレータのZolaを使おうとも考えたのですが、\n使っている人口的に資料やテーマの数が少なかったためHugoを選びました。\n実際ツール使うだけなので書かれてる言語は速度面以外だとほとんど関係ないですね。\nテーマはとりあえずhugo-future-imperfect-slimを使っています。\nブログを立てるまでに行った作業はこんな感じです。\n Hugoのインストール リポジトリの初期化 ドメインを取る GitHub Pagesの設定 記事を書く  それぞれの詳細を解説していきます。\n1.Hugoのインストール 僕は普段使っている環境がArch Linuxなのでそのままパッケージマネージャで導入しました。\nyay -S hugo Ubuntuなんかでもaptに入ってるっぽいので多分大丈夫だと思います。\n2.リポジトリの初期化 新しいサイトの生成は次のコマンドで行います。\nhugo new site mysite mysiteのところは好きな名前にしてください。\n次に、テーマの追加をします。\nhttps://themes.gohugo.io/で好きなテーマを選び、\n先ほど初期化したディレクトリ(ここではmysite)の中のthemes/に引っ張ってきます。\nmkdir themes cd themes git submodule add https://github.com/pacollins/hugo-future-imperfect-slim.git ここからは選んだテーマによって作業が大きく異なりそうですが、\n僕はダウンロードしてきたテーマのexampleSiteを書き換えながら作業を始めようと思い、\nまずこれを作業ディレクトリのルートに展開しました。\ncp -r themes/hugo-future-imperfect-slim/exampleSite/* ./ cpで変なファイル消されると怖いので、\n-iコマンドを付けてファイルを上書きするときに確認させてもいいと思います。\nこれでhugo server -Dを実行するとサンプルサイトがlocalhostで立ち上がります。\ncontents以下が記事なので好きなように作り換えていきましょう。\n新しい記事はhugo new blog/first.mdとかやると生成できます。\n僕が採用したテーマは多言語対応だったので日本語を選択しそれ以外を消したのですが、\n日本語も微妙だったので書き換えました。\n(Aboutが約とかになっている時点でまあそうですよねーとなりました)\nHugoはユーザが書いた設定を優先して見に行くので\nthemes/hugo-future-imperfect-slim/layout/i18n/ja.tomlを\n/i18n/ja.tomlにコピーしていろいろ書き換えています。\n3.ドメインを取る 好きに取ってください。 僕はGoogle Domainsで取りました。\n取ったらDNS設定のところでGitHubのレコードを登録します。\n  登録するレコードはこの4つです。\nただしこれは2020年8月のものなのでちゃんと確認してから追加しましょう。\n4.GitHub Pagesの設定 GitHub Pagesは静的サイトを無料で公開できるホスティングサービスです。\n独自ドメインも設定できるので、先程買ったものが使えます。\n今作業しているディレクトリをGitHubのリポジトリにpushしたら、\nリポジトリのsettings/options/GitHub Pagesから設定できます。\n  5.記事を書く 好きに書きましょう。\nあとは公開するだけです。\n 終わりに こんな感じでブログ立てました。\n本当はVPS借りてサーバ立ててやろうという意気込みがあったのですが、\nそして実際に途中までやっていましたが、\n結局面倒くさくなってこっちにしました。\nまあコストが低いほうが長続きもしそうなので、ゆるーくやっていきたいと思います。\n読んでいただいてありがとうございました！\n",
    "ref": "/blog/first/"
  },{
    "title": "About",
    "date": "",
    "description": "",
    "body": "コンピュータサイエンスと艦これが好きな関西の大学生です。\n",
    "ref": "/about/"
  },{
    "title": "Contact",
    "date": "",
    "description": "",
    "body": "",
    "ref": "/contact/"
  }]
